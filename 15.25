public class YourActivity extends AppCompatActivity {

    private static final Map<String, String[]> deploymentMappings = new HashMap<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.your_layout);

        initializeDeploymentMappings();

        Spinner deploymentTypeSpinner = findViewById(R.id.deploymentTypeSpinner);
        deploymentTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long row) {
                String selectedDeploymentType = parent.getItemAtPosition(position).toString();

                if (deploymentMappings.containsKey(selectedDeploymentType)) {
                    String[] autofillValues = deploymentMappings.get(selectedDeploymentType);

                    // Autofill selectmfserver spinner
                    Spinner mfServerSpinner = findViewById(R.id.selectmfserver);
                    int mfServerPosition = mfServerAdapter.getPosition(autofillValues[0]);
                    mfServerSpinner.setSelection(mfServerPosition);

                    // Autofill redirectTo spinner
                    Spinner redirectToSpinner = findViewById(R.id.redirectTo);
                    int redirectToPosition = redirectToAdapter.getPosition(autofillValues[1]);
                    redirectToSpinner.setSelection(redirectToPosition);

                    // Autofill select_nsa_mfserver spinner
                    Spinner nsaMfServerSpinner = findViewById(R.id.select_nsa_mfserver);
                    int nsaMfServerPosition = nsaMfServerAdapter.getPosition(autofillValues[2]);
                    nsaMfServerSpinner.setSelection(nsaMfServerPosition);
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                // No action needed when nothing is selected
            }
        });
    }

    private void initializeDeploymentMappings() {
        deploymentMappings.put("Prod", new String[]{"MF Prod exp-aws", "None", "NSA DC"});
        deploymentMappings.put("TdcCanary", new String[]{"MF Prod exp-aws", "tdc-canary", "BYPASS CDN TDC Canary"});
        deploymentMappings.put("SacCanary", new String[]{"MF prod exp - SDC", "sac-canary", "SDC"});
        deploymentMappings.put("AwsEast", new String[]{"MF prod exp - AWS - East", "virginia", "BYPASS CDN"});
        deploymentMappings.put("AwsWest", new String[]{"MF prod exp - AWS - West", "oregon", "BYPASS CDN AWS WEST"});
        deploymentMappings.put("TdcCanaryByPassCdn", new String[]{"MF prod exp - TDC", "tdc-canary", "BYPASS CDN"});
        deploymentMappings.put("SacCanaryByPassCdn", new String[]{"MF prod exp - SDC", "sac-canary", "BYPASS CDN"});
        deploymentMappings.put("AwsEastByPassCdn", new String[]{"MF Prod", "virginia", "BYPASS CDN AWS EAST"});
        deploymentMappings.put("AwsWestByPassCdn", new String[]{"MF Prod", "oregon", "BYPASS CDN AWS WEST"});
    }
}
