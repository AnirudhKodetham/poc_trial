package com.vzw.atomic.utils

object SearchQueryManager {
    @Volatile
    var currentQuery: String = ""
}

package com.vzw.atomic.views.molecules

import android.content.Context
import android.text.Spannable
import android.text.SpannableString
import android.text.style.StyleSpan
import android.util.AttributeSet
import com.vzw.atomic.utils.SearchQueryManager
import com.vzw.hss.myverizon.atomic.models.atoms.LabelAtomModel
import com.vzw.hss.myverizon.atomic.views.atoms.LabelAtomView

class SearchHighlightLabelView : LabelAtomView {
    constructor(mContext: Context) : super(mContext)
    constructor(mContext: Context, attribute: AttributeSet) : super(mContext, attribute)
    constructor(mContext: Context, attribute: AttributeSet, style: Int) : super(
        mContext,
        attribute,
        style
    )

    override fun applyStyle(model: LabelAtomModel) {
        super.applyStyle(model)

        // Get the current search query
        val query = SearchQueryManager.currentQuery

        // Highlight the query in the label text
        if (query.isNotEmpty()) {
            val originalText = model.text ?: return
            val spannable = SpannableString(originalText)

            val startIndex = originalText.lowercase().indexOf(query.lowercase())
            if (startIndex >= 0) {
                val endIndex = startIndex + query.length
                spannable.setSpan(
                    StyleSpan(android.graphics.Typeface.BOLD),
                    startIndex,
                    endIndex,
                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
                )
            }

            // Set the formatted text
            this.text = spannable
        }
    }
}


private fun observerSearch() {
    searchTextFlow()
        .debounce(200)
        .filter {
            if (it.isEmpty() && isSearchActive) {
                onSearchListener?.showOrHideOverlay(
                    true,
                    globalSearchListTemplateModel = initialSearchTemplate()
                )
            }
            it.isNotEmpty() && isSearchActive
        }
        .distinctUntilChanged()
        .onEach { query ->
            // Save the query in the singleton
            SearchQueryManager.currentQuery = query
            performApiCall(query)
        }
        .launchIn(scope)
}
