// Key for storing the search history in SharedPreferences
private static final String SEARCH_HISTORY_KEY = "search_history";
private SharedPreferences sharedPreferences;

@Override
public void habSearchChange(SearchTextFieldAtomEnum searchTextFieldAtomEnum, @NonNull String query, boolean focus) {
    HashMap<String, Object> requestParams;
    String input_field = "searchInput";
    searchQuery = query;

    if (habContentModel == null) {
        return;
    }

    sharedPreferences = getApplicationContext().getSharedPreferences("MyAppPreferences", Context.MODE_PRIVATE);

    switch (searchTextFieldAtomEnum) {
        case AFTER_TEXT_CHANGED:
            Log.d("QUERY", "AFTER TEXT CHANGE");

            if (TextUtils.isEmpty(query.trim()) && focus) {
                displayRecentSearches();
            } else {
                searchListTemplateView.setVisibility(View.GONE);
                if (query.trim().length() > 2) {
                    requestParams = new HashMap<>();
                    requestParams.put(input_field, query.trim());
                    if (getCurrentFragment() != null) {
                        requestParams.put(Constants.PAGE_TYPE, getCurrentFragment().getPageType());
                    }
                    searchListPresenter.getSearchOverlayData(getParent(), getApplicationContext(), habContentModel.getSearchActionModel(), requestParams, searchListTemplateView, searchOverlayView, searchAtomView);
                }
            }
            break;

        case ON_CLOSE:
            Log.d("QUERY", "ON CLOSE");
            searchListPresenter.hideSearchOverlay(searchListTemplateView, searchOverlayView);
            searchListPresenter.hideKeyBoard(getParent());
            break;

        case ON_SEARCH:
            Log.d("QUERY", "ON SEARCH");
            if (TextUtils.isEmpty(query.trim()) || (!TextUtils.isEmpty(query.trim()) && query.length() < 2)) {
                return;
            }

            // Save the search query to SharedPreferences
            saveQueryToSharedPreferences(query.trim());

            requestParams = new HashMap<>();
            requestParams.put(input_field, query.trim());

            if (getCurrentFragment() != null) {
                requestParams.put(Constants.PAGE_TYPE, getCurrentFragment().getPageType());
            }
            if (searchDoneActionModel != null) {
                ActionModel doneAction = searchDoneActionModel;
                HashMap<String, Object> analyticsData = new HashMap<>();
                analyticsData.put(KEY_SEARCH_TERM, query.trim());
                doneAction.setAnalyticsData(analyticsData);
                executeAction(doneAction, true, requestParams);
            }
            searchListPresenter.hideSearchOverlay(searchListTemplateView, searchOverlayView);
            searchListPresenter.hideKeyBoard(getParent());
            break;
    }
}

// Method to save queries in SharedPreferences
private void saveQueryToSharedPreferences(String query) {
    String searchHistory = sharedPreferences.getString(SEARCH_HISTORY_KEY, "");
    if (!searchHistory.isEmpty()) {
        searchHistory += "," + query;
    } else {
        searchHistory = query;
    }
    sharedPreferences.edit().putString(SEARCH_HISTORY_KEY, searchHistory).apply();

    // Log the updated search history
    Log.d("SEARCH_HISTORY", "Saved Search History: " + searchHistory);
}
