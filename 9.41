fun recentSearchModel(query: String): DelegateModel {
    val listItem =
        """
        {
            "moleculeName": "listItem",
            "line": { "type": "none" },
            "molecule": {
                "topPadding": 12,
                "bottomPadding": 16,
                "leftPadding": 16,
                "rightPadding": 16,
                "moleculeName": "stack",
                "useHorizontalMargins": true,
                "useVerticalMargins": true,
                "molecules": [
                    {
                        "moleculeName": "stackItem",
                        "molecule": {
                            "moleculeName": "label",
                            "text": "${query}",
                            "fontStyle": "RegularBodyLarge"
                        }
                    },
                    {
                        "moleculeName": "stackItem",
                        "horizontalAlignment": "trailing",
                        "molecule": {
                            "image": "ic_close_notification",
                            "moleculeName": "image",
                            "contentMode": "scaleAspectFit",
                            "width": 16,
                            "height": 16
                        }
                    }
                ],
                "axis": "horizontal"
            },
            "action": {
                "actionType": "search",
                "action": "triggerSearch",
                "extraParameters": {
                    "searchInput": "${query}"
                }
            },
            "hideArrow": true
        }
        """.trimIndent()

    val jsonObject = Utils.convertStringToJsonObject(listItem)
    val model = DynamicMoleculeConverterUtil().getDelegateModel(jsonObject)
    return model
}


private fun handleSearchAction(actionType: String, extraParams: Map<String, String>) {
    if (actionType == "triggerSearch") {
        val query = extraParams["searchInput"] ?: return
        performDoneApiCall(query)
    }
}
