// Declare ActivityResultLauncher at the class level
private lateinit var speechRecognitionLauncher: ActivityResultLauncher<Intent>

// In onCreateView() or onViewCreated(), register the launcher
override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
    super.onViewCreated(view, savedInstanceState)

    speechRecognitionLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            val data = result.data
            data?.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS)?.let { resultList ->
                val spokenText = resultList[0]
                Log.d("SpeechRecognizerResult", "Spoken Text: $spokenText")

                // Pass the spoken text to the done action for search
                val action = (this@AtomicSearchMoleculeListFragment.pageData as? AtomicSearchListMoleculePageModel)?.searchDoneAction
                action?.analyticsData?.put(KEY_SEARCH_TERM, spokenText)
                Log.d("SearchAction", "Executing search for: $spokenText")

                // Set request parameters and execute action
                action?.let { actionModel ->
                    val requestParams = hashMapOf<String, Any>(
                        "searchInput" to spokenText,
                        "currentPage" to "Done"
                    )
                    executeAction(actionModel, true, requestParams)
                }
            }
        }
    }
}

// Start the speech recognizer using the launcher
private fun startSpeechRecognition() {
    val intent = Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH).apply {
        putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM)
        putExtra(RecognizerIntent.EXTRA_LANGUAGE, Locale.getDefault())
        putExtra(RecognizerIntent.EXTRA_PROMPT, "Speak now")
    }

    try {
        speechRecognitionLauncher.launch(intent) // Start the speech recognizer
    } catch (e: ActivityNotFoundException) {
        // Handle the error (e.g., show a Toast or log)
    }
}
