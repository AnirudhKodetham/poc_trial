    if (query.isNotEmpty()) {
        val saveSearchAction = SaveSearchQueryAction("save_search", "save").apply {
            queryToSave = query
            maxQueryCount = 10 // Adjust the max query count as needed
        }
        SearchUtil.saveRecentSearches(sharedPreferencesUtil, saveSearchAction)
    }


    if (query.isNotEmpty()) {
        val recentSearches = SearchUtil.getRecentSearches(sharedPreferencesUtil).toMutableList()

        // Remove duplicate if it exists
        recentSearches.remove(query)
        // Add the new query at the top
        recentSearches.add(0, query)
        // Enforce max size limit (e.g., 10)
        val maxQueryCount = 10
        if (recentSearches.size > maxQueryCount) {
            recentSearches.removeAt(recentSearches.size - 1)
        }

        // Save updated list back to SharedPreferences
        SearchUtil.saveRecentSearches(sharedPreferencesUtil, recentSearches)
    }



fun saveRecentSearches(
    sharedPreferencesUtil: SharedPreferencesUtil?,
    query: String,
    maxQueryCount: Int
) {
    if (query.isEmpty()) return

    // Fetch current recent searches
    val currentSearchData = sharedPreferencesUtil?.nSearchList ?: ""
    val searchList = currentSearchData
        .split(",")
        .filter { it.isNotEmpty() && it != query } // Avoid duplicates and empty strings

    // Add the new query at the top
    val updatedSearchList = listOf(query) + searchList

    // Limit to maxQueryCount
    val limitedSearchData = updatedSearchList
        .take(maxQueryCount)
        .joinToString(",")

    // Save back to SharedPreferences
    sharedPreferencesUtil?.nSearchList = "$limitedSearchData,"
}


saveRecentSearches(sharedPreferencesUtil, query, MAX_RECENT_SEARCHES)
