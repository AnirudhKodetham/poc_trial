@Override
public void habSearchChange(SearchTextFieldAtomEnum searchTextFieldAtomEnum, @NonNull String query, boolean focus) {
    HashMap<String, Object> requestParams;
    String input_field = "searchInput";
    searchQuery = query;

    if (habContentModel == null) {
        return;
    }

    switch (searchTextFieldAtomEnum) {
        case AFTER_TEXT_CHANGED:
            Log.d("QUERY", "AFTER TEXT CHANGE");
            if (TextUtils.isEmpty(query.trim()) && focus && searchListTemplateView != null && searchListTemplateView.getVisibility() == View.VISIBLE) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        searchListPresenter.showSearchOverlay(searchListTemplateView, searchOverlayView);
                    }
                });
            } else {
                if (query.trim().length() > 2) {
                    requestParams = new HashMap<>();
                    requestParams.put(input_field, query.trim());

                    // Save the query in SharedPreferences
                    saveSearchQuery(query.trim());

                    // Log the saved search queries
                    logSavedSearchQueries();

                    if (getCurrentFragment() != null) {
                        requestParams.put(Constants.PAGE_TYPE, getCurrentFragment().getPageType());
                    }
                    searchListPresenter.getSearchOverlayData(getParent(), getApplicationContext(), habContentModel.getSearchActionModel(), requestParams, searchListTemplateView, searchOverlayView, searchAtomView);
                }
            }
            break;

        case ON_CLOSE:
            Log.d("QUERY", "ON CLOSE");
            searchListPresenter.hideSearchOverlay(searchListTemplateView, searchOverlayView);
            searchListPresenter.hideKeyBoard(getParent());
            break;

        case ON_SEARCH:
            Log.d("QUERY", "ON SEARCH");
            if (TextUtils.isEmpty(query.trim()) || (!TextUtils.isEmpty(query.trim()) && query.length() < 2)) {
                return;
            }

            requestParams = new HashMap<>();
            requestParams.put(input_field, query.trim());

            // Save the query in SharedPreferences
            saveSearchQuery(query.trim());

            // Log the saved search queries
            logSavedSearchQueries();

            Log.d(query, "this is it");

            if (getCurrentFragment() != null) {
                requestParams.put(Constants.PAGE_TYPE, getCurrentFragment().getPageType());
            }
            if (searchDoneActionModel != null) {
                ActionModel doneAction = searchDoneActionModel;
                HashMap<String, Object> analyticsData = new HashMap<>();
                analyticsData.put(KEY_SEARCH_TERM, query.trim());
                doneAction.setAnalyticsData(analyticsData);
                executeAction(doneAction, true, requestParams);
            }

            searchListPresenter.hideSearchOverlay(searchListTemplateView, searchOverlayView);
            searchListPresenter.hideKeyBoard(getParent());
            break;
    }
}
// Save a new search query in SharedPreferences
private void saveSearchQuery(String query) {
    SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences("SearchPrefs", MODE_PRIVATE);
    SharedPreferences.Editor editor = sharedPreferences.edit();
    
    String savedQueries = sharedPreferences.getString("saved_searches", "");
    
    // Avoid duplicates by checking if the query is already present
    if (!savedQueries.contains(query)) {
        savedQueries = savedQueries.isEmpty() ? query : savedQueries + "," + query;
        editor.putString("saved_searches", savedQueries);
        editor.apply();
    }
}

// Log the saved search queries
private void logSavedSearchQueries() {
    SharedPreferences sharedPreferences = getApplicationContext().getSharedPreferences("SearchPrefs", MODE_PRIVATE);
    String savedQueries = sharedPreferences.getString("saved_searches", "");
    
    // Log the saved search queries
    Log.d("Saved Queries", savedQueries);
}
