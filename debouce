import kotlinx.coroutines.*
import kotlinx.coroutines.flow.*
import android.text.TextUtils

// Assuming you're inside a Coroutine scope, like within a Fragment or ViewModel
val inputDelay = 300L // Define the debounce delay

// Create a Flow from the text changes in your model
model.textChanges() // Replace with actual Flow observing text changes
    .map { it?.trim() } // Trim the text
    .onEach { text ->
        if (TextUtils.isEmpty(text)) {
            showSearchOverlay() // Show the overlay when text is empty
        }
    }
    .filterNot { TextUtils.isEmpty(it) } // Skip further processing for empty text
    .filter { it.length > 1 } // Proceed only if the length is greater than 1
    .debounce(inputDelay) // Apply the debounce delay
    .onEach {
        getOverlayData() // Fetch overlay data after debounce delay
    }
    .launchIn(CoroutineScope(Dispatchers.Main)) // Launch the flow in the Main scope
