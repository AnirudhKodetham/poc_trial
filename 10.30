public class OnDeploymentTypeSelectedListener implements AdapterView.OnItemSelectedListener {
    // Local instances for adapters and activity
    private final ArrayAdapter<CharSequence> mfServerAdapter;
    private final ArrayAdapter<CharSequence> redirectToAdapter;
    private final ArrayAdapter<CharSequence> nsaMfServerAdapter;
    private final Activity activity;

    // Constructor to initialize activity and adapters
    public OnDeploymentTypeSelectedListener(Activity activity,
                                             ArrayAdapter<CharSequence> mfServerAdapter,
                                             ArrayAdapter<CharSequence> redirectToAdapter,
                                             ArrayAdapter<CharSequence> nsaMfServerAdapter) {
        this.activity = activity;
        this.mfServerAdapter = mfServerAdapter;
        this.redirectToAdapter = redirectToAdapter;
        this.nsaMfServerAdapter = nsaMfServerAdapter;
    }

    @Override
    public void onItemSelected(AdapterView<?> parent, View view, int position, long row) {
        String selectedDeploymentType = parent.getItemAtPosition(position).toString();

        // Predefined mappings for deployment types and their corresponding autofill values
        Map<String, String[]> deploymentMappings = new HashMap<>();
        deploymentMappings.put("Prod", new String[]{"MF Prod", "None", "NSA DC"});
        deploymentMappings.put("TdcCanary", new String[]{"MF prod exp - TDC", "tdc-canary", "TDC"});
        deploymentMappings.put("SacCanary", new String[]{"MF prod exp - SDC", "sac-canary", "SDC"});
        deploymentMappings.put("AwsEast", new String[]{"MF Prod", "virginia", "AWS"});
        deploymentMappings.put("AwsWest", new String[]{"MF Prod", "oregon", "AWS WEST"});
        deploymentMappings.put("TdcCanaryByPassCdn", new String[]{"MF prod exp - TDC", "tdc-canary", "BYPASS CDN"});
        deploymentMappings.put("SacCanaryByPassCdn", new String[]{"MF prod exp - SDC", "sac-canary", "BYPASS CDN"});
        deploymentMappings.put("AwsEastByPassCdn", new String[]{"MF Prod", "virginia", "BYPASS CDN AWS EAST"});
        deploymentMappings.put("AwsWestByPassCdn", new String[]{"MF Prod", "oregon", "BYPASS CDN AWS WEST"});

        if (deploymentMappings.containsKey(selectedDeploymentType)) {
            String[] autofillValues = deploymentMappings.get(selectedDeploymentType);

            // Autofill selectmfserver spinner
            Spinner mfServerSpinner = activity.findViewById(R.id.selectmfserver);
            int mfServerPosition = mfServerAdapter.getPosition(autofillValues[0]);
            mfServerSpinner.setSelection(mfServerPosition);

            // Autofill redirectTo spinner
            Spinner redirectToSpinner = activity.findViewById(R.id.redirectTo);
            int redirectToPosition = redirectToAdapter.getPosition(autofillValues[1]);
            redirectToSpinner.setSelection(redirectToPosition);

            // Autofill select_nsa_mfserver spinner
            Spinner nsaMfServerSpinner = activity.findViewById(R.id.select_nsa_mfserver);
            int nsaMfServerPosition = nsaMfServerAdapter.getPosition(autofillValues[2]);
            nsaMfServerSpinner.setSelection(nsaMfServerPosition);
        }
    }

    @Override
    public void onNothingSelected(AdapterView<?> parent) {
        // No action needed when nothing is selected
    }
}

Spinner deploymentTypeSpinner = findViewById(R.id.selectDeploymentTypeSpinner);
ArrayAdapter<CharSequence> mfServerAdapter = ArrayAdapter.createFromResource(this, R.array.mf_server_mapping, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> redirectToAdapter = ArrayAdapter.createFromResource(this, R.array.redirect_to_array, android.R.layout.simple_spinner_item);
ArrayAdapter<CharSequence> nsaMfServerAdapter = ArrayAdapter.createFromResource(this, R.array.mf_nsa_server_mapping, android.R.layout.simple_spinner_item);

deploymentTypeSpinner.setOnItemSelectedListener(new OnDeploymentTypeSelectedListener(this, mfServerAdapter, redirectToAdapter, nsaMfServerAdapter));
