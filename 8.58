private var lastInputTime: Long = 0
private var lastTextLength: Int = 0

private fun searchTextFlow(): Flow<Pair<String, InputSource>> = callbackFlow {
    val watcher = object : TextWatcher {
        override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {
            lastInputTime = System.currentTimeMillis()
            lastTextLength = s?.length ?: 0
        }

        override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
            val currentTime = System.currentTimeMillis()
            val newText = s.toString()
            val newLength = newText.length
            val timeDiff = currentTime - lastInputTime
            val lengthDiff = newLength - lastTextLength

            val inputSource = when {
                lengthDiff > 5 && timeDiff < 100 -> InputSource.VOICE // Large text appears instantly
                lengthDiff > 5 -> InputSource.PASTE // Pasting usually adds many characters at once
                else -> InputSource.TYPING // Small character changes = typing
            }

            trySend(Pair(newText, inputSource)).isSuccess
        }

        override fun afterTextChanged(s: Editable?) {}
    }

    searchResultsView?.addTextChangedListener(watcher)
    awaitClose { searchResultsView?.removeTextChangedListener(watcher) }
}

// Enum to classify input type
enum class InputSource {
    VOICE, PASTE, TYPING
}

// Observer to handle search
private fun observerSearch() {
    searchTextFlow()
        .debounce(300)
        .filter { (query, _) -> query.isNotEmpty() && isSearchActive }
        .distinctUntilChanged()
        .onEach { (query, inputSource) ->
            when (inputSource) {
                InputSource.VOICE -> Log.d("SearchInput", "Voice input detected: $query")
                InputSource.PASTE -> Log.d("SearchInput", "Pasted text detected: $query")
                InputSource.TYPING -> Log.d("SearchInput", "Typed input detected: $query")
            }
            performApiCall(query)
        }
        .launchIn(scope)
}
